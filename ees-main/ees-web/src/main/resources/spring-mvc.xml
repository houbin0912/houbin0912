<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<description>Spring MVC Configuration</description>
	<!-- 加载配置属性文件 -->
	<context:property-placeholder
		ignore-unresolvable="true" location="classpath:config.properties" />

	<!-- 使用Annotation自动注册Bean,只扫描@Controller -->
	<!-- <context:component-scan base-package="com.bx.it" use-default-filters="false">base-package 
		如果多个，用“,”分隔 <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" 
		/> </context:component-scan> -->
	<context:component-scan base-package="com.baixin.ees" />

	<!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
	<mvc:annotation-driven />

	<!-- <mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven> -->

	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
         <property name="messageConverters">
             <list>
                 <!--json视图拦截器，读取到@ResponseBody的时候去配置它-->
                 <ref bean="mappingJacksonHttpMessageConverter"/>
             </list>
         </property>
     </bean>
     <!--json转化器，它可以将结果转化-->
     <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
         <property name="supportedMediaTypes">
             <list>
                 <value>application/json;charset=UTF-8</value>
             </list>
         </property>
     </bean>


	<!-- <bean id="springUtils" class="com.bx.it.utils.SpringUtils" /> -->

	<!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="mediaTypes">
			<map>
				<entry key="xml" value="application/xml" />
				<entry key="json" value="application/json" />
			</map>
		</property>
		<property name="ignoreAcceptHeader" value="true" />
		<property name="favorPathExtension" value="true" />
	</bean>




	<!-- 定义视图文件解析 -->
	<!-- <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<property name="prefix" value="${web.view.prefix}" /> <property name="suffix" 
		value="${web.view.suffix}" /> </bean> -->

	<!-- <bean id="velocityConfigurer" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer"> 
		<property name="resourceLoaderPath" value="/WEB-INF/" />模板存放的路径 <property 
		name="configLocation" value="classpath:velocity.properties" /> </bean> -->

	<!-- 配置视图的显示 -->
	<!-- <bean id="ViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver"> 
		<property name="prefix" value="/" />视图文件的前缀，即存放的路径 <property name="suffix" 
		value=".html" />视图文件的后缀名 <property name="toolboxConfigLocation" value="/WEB-INF/tools.xml" 
		/>toolbox配置文件路径 <property name="dateToolAttribute" value="date" />日期函数名称 
		<property name="numberToolAttribute" value="number" />数字函数名称 <property name="contentType" 
		value="text/html;charset=UTF-8" /> <property name="exposeSpringMacroHelpers" 
		value="true" />是否使用spring对宏定义的支持 <property name="exposeRequestAttributes" 
		value="true" />是否开放request属性 <property name="requestContextAttribute" value="rc"/>request属性引用名称 
		<property name="layoutUrl" value="layout/default.vm"/>指定layout文件 </bean> -->

	<!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
	<mvc:default-servlet-handler />

	<!-- 静态资源映射 -->
	<mvc:resources mapping="/static/**" location="/static/" />
	<mvc:resources mapping="/upload/**" location="/upload/" />

	<!-- 定义无Controller的path<->view直接映射 -->
	<!-- <mvc:view-controller path="/" /> -->

	<!-- 拦截器配置 -->
	<!-- <mvc:interceptors> <mvc:interceptor> <mvc:mapping path="${adminPath}/**" 
		/> <mvc:exclude-mapping path="${adminPath}/" /> <mvc:exclude-mapping path="${adminPath}/login" 
		/> <mvc:exclude-mapping path="${adminPath}/sys/menu/tree" /> <mvc:exclude-mapping 
		path="${adminPath}/sys/menu/treeData" /> <mvc:exclude-mapping path="${adminPath}/oa/oaNotify/self/count" 
		/> <bean class="com.msyd.mgmt.modules.sys.interceptor.LogInterceptor" /> 
		</mvc:interceptor> </mvc:interceptors> -->

	<!-- 支持Shiro对Controller的方法级AOP安全控制 begin -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
		depends-on="lifecycleBeanPostProcessor"> <property name="proxyTargetClass" 
		value="true" /> </bean> -->

	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!--<prop key="java.lang.Throwable">error/500</prop> -->
			</props>
		</property>
	</bean>
	<!-- 支持Shiro对Controller的方法级AOP安全控制 end -->

	<!-- 上传文件拦截，设置最大上传文件大小 10M=10*1024*1024(B)=10485760 bytes -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="${web.maxUploadSize}" />
	</bean>

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations"> <!-- PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 -->
			<array>
				<!-- <value>classpath:autotest.properties</value> -->
			</array>
		</property>
	</bean>


</beans>